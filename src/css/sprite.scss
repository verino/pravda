// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$-o-name: 'Oк';
$-o-x: 25px;
$-o-y: 0px;
$-o-offset-x: -25px;
$-o-offset-y: 0px;
$-o-width: 15px;
$-o-height: 15px;
$-o-total-width: 65px;
$-o-total-height: 41px;
$-o-image: '../img/sprite.png';
$-o-: (25px, 0px, -25px, 0px, 15px, 15px, 65px, 41px, '../img/sprite.png', 'Oк', );
$-vk-name: 'Vk';
$-vk-x: 25px;
$-vk-y: 26px;
$-vk-offset-x: -25px;
$-vk-offset-y: -26px;
$-vk-width: 15px;
$-vk-height: 15px;
$-vk-total-width: 65px;
$-vk-total-height: 41px;
$-vk-image: '../img/sprite.png';
$-vk: (25px, 26px, -25px, -26px, 15px, 15px, 65px, 41px, '../img/sprite.png', 'Vk', );
$facebook-logo-name: 'facebook-logo';
$facebook-logo-x: 0px;
$facebook-logo-y: 0px;
$facebook-logo-offset-x: 0px;
$facebook-logo-offset-y: 0px;
$facebook-logo-width: 15px;
$facebook-logo-height: 16px;
$facebook-logo-total-width: 65px;
$facebook-logo-total-height: 41px;
$facebook-logo-image: '../img/sprite.png';
$facebook-logo: (0px, 0px, 0px, 0px, 15px, 16px, 65px, 41px, '../img/sprite.png', 'facebook-logo', );
$social-icon-name: 'social-icon';
$social-icon-x: 50px;
$social-icon-y: 0px;
$social-icon-offset-x: -50px;
$social-icon-offset-y: 0px;
$social-icon-width: 15px;
$social-icon-height: 15px;
$social-icon-total-width: 65px;
$social-icon-total-height: 41px;
$social-icon-image: '../img/sprite.png';
$social-icon: (50px, 0px, -50px, 0px, 15px, 15px, 65px, 41px, '../img/sprite.png', 'social-icon', );
$twitter-icon-name: 'twitter-icon';
$twitter-icon-x: 0px;
$twitter-icon-y: 26px;
$twitter-icon-offset-x: 0px;
$twitter-icon-offset-y: -26px;
$twitter-icon-width: 15px;
$twitter-icon-height: 15px;
$twitter-icon-total-width: 65px;
$twitter-icon-total-height: 41px;
$twitter-icon-image: '../img/sprite.png';
$twitter-icon: (0px, 26px, 0px, -26px, 15px, 15px, 65px, 41px, '../img/sprite.png', 'twitter-icon', );
$spritesheet-width: 65px;
$spritesheet-height: 41px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($-o-, $-vk, $facebook-logo, $social-icon, $twitter-icon, );
$spritesheet: (65px, 41px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
